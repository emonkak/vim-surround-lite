*surround_obj.txt*	Surround the text by a delimiter

Author: Shota Nozaki <emonkak@gmail.com>
License: MIT license

==============================================================================
CONTENTS					*surround-obj-contents*

Introduction	|surround-obj-introduction|
Usage		|surround-obj-examples|
Interface	|surround-obj-interface|
  Variables	|surround-obj-variables|
  Key Mappings	|surround-obj-key-mappings|
Notes		|surround-obj-notes|

==============================================================================
INTRODUCTION					*surround-obj-introduction*

*surround-obj* is a Vim plugin to provide three operations: "add", "change",
and "delete" for the surround object, which represent the text surrounded by
any delimiter strings. It has built-in surround objects such as parentheses,
quotes, tags, and so on, and you can also define your own one.

Requirements:

- Vim 8.0 or later

==============================================================================
USAGE							*surround-obj-usage*

By default, "surround-obj" does not define any key mappings. For example, you
can define key mappings as follows:
>
	map ys  <Plug>(surround-obj-add)
	nmap cs  <Plug>(surround-obj-change)
	nmap ds  <Plug>(surround-obj-delete)
<
Also, You can add user-defined surround objects by |g:surround_obj_config| as
follows:
>
	let g:surround_obj_config = {
	\   'a': { 'type': 'block', 'delimiter': ['<', '>'] },
	\   'r': { 'type': 'block', 'delimiter': ['[', ']'] },
	\   'e': { 'type': 'inline', 'delimiter': '_' },
	\   'E': { 'type': 'inline', 'delimiter': '**' },
	\   'jA': {'type': 'block', 'delimiter': ['≪', '≫']},
	\   'ja': {'type': 'block', 'delimiter': ['＜', '＞']},
	\   'jb': {'type': 'block', 'delimiter': ['（', '）']},
	\   'jB': {'type': 'block', 'delimiter': ['｛', '｝']},
	\   'jk': {'type': 'block', 'delimiter': ['「', '」']},
	\   'jK': {'type': 'block', 'delimiter': ['『', '』']},
	\   'jr': {'type': 'block', 'delimiter': ['［', '］']},
	\   'js': {'type': 'block', 'delimiter': ['【', '】']},
	\   'jt': {'type': 'block', 'delimiter': ['〔', '〕']},
	\   'jy': {'type': 'block', 'delimiter': ['〈', '〉']},
	\   'jY': {'type': 'block', 'delimiter': ['《', '》']},
	\ }
<
The following definitions are loaded as the built-in surround object:

	Key   Type     Delimiter   ~
	-------------------------- ~
	!     inline   '!'
	"     inline   '"'
	#     inline   '#'
	$     inline   '$'
	%     inline   '%'
	&     inline   '&'
	'     inline   '''
	(     block    '(', ')'
	)     block    '( ', ' )'
	*     inline   '*'
	+     inline   '+'
	,     inline   ','
	-     inline   '-'
	.     inline   '.'
	/     inline   '/'
	:     inline   ':'
	;     inline   ';'
	<     block    '<', '>'
	=     inline   '='
	>     block    '< ', ' >'
	?     inline   '?'
	@     inline   '@'
	B     alias    same as '{'
	[     block    '[', ']'
	\     inline   '\'
	]     block    '[ ', ' ]'
	^     inline   '^'
	_     inline   '_'
	`     inline   '`'
	b     inline   same as '('
	f     block    function call block (such as "f()")
	t     block    tag block (such as "<div></div>")
	{     block    '{', '}'
	|     inline   '|'
	}     block    '{ ', ' }
	~     inline   '~'

==============================================================================
INTERFACE					*surround-obj-interface*

------------------------------------------------------------------------------
VARIABLES					*surround-obj-variables*

g:surround_obj_config				*g:surround_obj_config*
	A dictionary with the definition of surround object. Its key indicates
	key strokes for the mapping.

	The definition is one of the following three values:

	(1) "block" ~

	A block object is a multi-line text that is surrounded by different
	delimiter strings at the beginning and end. Its definition is defined
	by a dictionary with the following keys:

	Key         Type                  Description                       ~
	------------------------------------------------------------------- ~
	type        |String|              Must be "block".
	delimiter   |List| or |Funcref|   A pair of delimiter strings or a
	                                  function that returns the pair of
	                                  delimiter strings.
	pattern     optional |List|       A pair of patterns to search the
	                                  delimiter. If the pattern does not
	                                  specified, it is generated by the
	                                  delimiters. However, when the
	                                  function is specified as a
	                                  "delimiter", it is required.

	Example 1: Double square brackets block, useful in shell script
>
	let g:surround_obj_config['R'] = {
	\   'type': 'block',
	\   'delimiter': ['[[ ', ' ]]'],
	\   'pattern': ['\[\[\s*', '\s*\]\]'],
	\ }
<
	Example 2: Latex \begin{} command object
>
	function! s:ask_latex_env() abort
	  let env = input('\begin{')
	  return ['\begin{' . env . '}', '\end{' . env . '}']
	endfunction

	let g:surround_obj_config['\']= {
	\   'type': 'block',
	\   'delimiter': function('s:ask_latex_env'),
	\   'pattern': ['\begin{\h\w*}', '\end{\h\w*}'],
	\ }
<
	(2) "inline" ~

	A inline object is a single-line text that is surrounded by same
	delimiter strings at the both sides. Its definition is defined by
	a dictionary with the following keys:

	Key         Type                    Description                      ~
	-------------------------------------------------------------------- ~
	type        |String|                Must be "inline".
	delimiter   |String| or |Funcref|   A delimiter string or a function
	                                    that returns the delimiter
	                                    string.
	pattern     (optional) |String|     A pattern to search the
	                                    delimiter. If the pattern is not
	                                    specified, it is generated by
	                                    the delimiter. However, when the
	                                    function is specified as a
	                                    "delimiter", it is required.

	Example: A text between double asterisks for markdown bold text
>
	let g:surround_obj_config['E'] = {
	\   'type': 'inline',
	\   'delimiter': '**',
	\   'pattern': '\*\*',
	\ }
<
	(3) "nop" ~

	A Nop is a definition to disable existing built-in objects.

	Example: Disable the built-in "b" object.
>
	let g:surround_obj_config['b'] = {
	\   'type': 'nop',
	\ }
<
g:surround_obj_no_builtin_objects	*g:surround_obj_no_builtin_objects*
	If this value is |TRUE|, any built-in surround objects will not be
	loaded.

------------------------------------------------------------------------------
KEY MAPPINGS					*surround-obj-key-mappings*

<Plug>(surround-obj-add){motion}{key}	*<Plug>(surround-obj-add)*
	Surround {motion} text with the delimiters on both sides, as shown in
	the following table (suppose the mapping is mapped to "ys", and all
	built-in surround objects are defined):

	When [count] given, the delimiters will be repeated [count] times.

	Input         | Before | After       ~
	--------------+--------+------------ ~
	yse(          | #foo   | #(foo)
	yse(.         | #foo   | #((foo))
	2yse(         | #foo   | #((foo))
	yse)          | #foo   | #( foo )
	yse"          | #foo   | #"foo"
	yse'          | #foo   | #'foo'
	ysetp<CR>     | #foo   | #<p>foo</p>
	ysefprint<CR> | #foo   | #print(foo)

	Note: '#' indicates the cursor

<Plug>(surround-obj-change){key}{key}		*<Plug>(surround-obj-change)*
	Change the delimiter string surrounding the text, as show in the
	following table (suppose the mapping is mapped to "cs", and all
	built-in surround objects are defined):

	Input     | Before           | After           ~
	----------+------------------+---------------- ~
	cs'"      | #'foo'           | #"foo"
	cs'"      | 'foo#'           | #"foo"
	cs'"      | #'\'foo\''       | #"\'foo\'"
	cs({      | #(foo)           | #{foo}
	cs({      | #(foo())         | #{foo()}
	cs({      | (foo#())         | (foo#{})
	csttp<CR> | #<div>foo</div>  | #<p>foo</p>
	csttp<CR> | <div>#foo</div>  | #<p>foo</p>
	csttp<CR> | <div>foo</div#>  | #<div>foo</div>

	Note: '#' indicates the cursor

	Not in Normal mode, it does nothing.

<Plug>(surround-obj-delete){key}		*<Plug>(surround-obj-delete)*
	Delete the delimiter string from the text surrounded by it, as show in
	the following table (suppose the mapping is mapped to "ds", and all
	built-in surround objects are defined):

	Input | Before           | After    ~
	------+------------------+--------- ~
	ds'   | #'foo'           | #foo
	ds'   | 'foo#'           | #foo
	ds'   | #'\'foo\''       | #\'foo\'
	ds(   | #(foo)           | #foo
	ds(   | #(foo())         | #foo()
	ds(   | (foo#())         | (foo#)
	dst   | #<div>foo</div>  | #foo
	dst   | <div>#foo</div>  | #foo
	dst   | <div>foo</div#>  | #foo

	Note: '#' indicates the cursor

	Not in Normal mode, it does nothing.

<Plug>(surround-obj-a:{key})			*<Plug>(surround-obj-a:{key})*
	Text object for a text surrounded by the delimiter string that
	includes the delimiter string itself. However, unlike built-in "a"
	text objects, it does not include white-space.

	Example 1: "a quoted text" (input <Plug>(surround-obj-a:"))
>
	printf('hello %s', #'world')
	                    ^-----^

	Example 1: "a quoted text" (input <Plug>(surround-obj-a:"))
>
	printf('hello %s', #'world')
	                    ^-----^
<
	Example 2-1: "a tag block" for outer <div>
	             (input <Plug>(surround-obj-a:t))
>
	#<div>
	 ^----
	  <div>hello world</div>
	  ----------------------
	</div>
	-----^
<
	Example 2-2: "a tag block" for inner <div>
	             (input <Plug>(surround-obj-a:t))
>
	<div>
	  #<div>hello world</div>
	   ^--------------------^
	</div>
<
	Note: '#' indicates the cursor

<Plug>(surround-obj-i:{key})			*<Plug>(surround-obj-i:{key})*
	Text object for the inside of a text surrounded by the delimiter
	string.

	Example 1: "inner quoted text" (input <Plug>(surround-obj-i:"))
>
	printf('hello %s', #'world')
	                     ^---^
<
	Example 2-1: "inner tag block" for inner <div>
	             (input <Plug>(surround-obj-i:t))
>
	#<div>
	  <div>hello world</div>
	  ^--------------------^
	</div>
<
	Example 2-2: "inner tag block" for outer <div>
	             (input <Plug>(surround-obj-i:t))
>
	<div>
	  #<div>hello world</div>
	        ^---------^
	</div>
<
	Note: '#' indicates the cursor

==============================================================================
NOTES							*surround-obj-notes*

------------------------------------------------------------------------------
DIFFERENCES FROM BUILT-IN TEXT OBJECTS

The "change" and "delete" operations are implemented through a combination of
operator and text object provided by "surround-obj" itself. Text objects are
exposed and can be directly used by the user. Note that these text objects
have slight differences to the built-in ones.

(1) Our block objects do not ignore delimiters inside quotes.

When the '%' character is not present in 'cpoptions', The built-in text
objects like |a(| find blocks ignoring delimiters inside quotes. For example
(Note that '#' indicates the cursor):
>
	(# ")" )
	^------^
>
However, our text objects do not recognize delimiters inside quotes:
>
	(# ")" )
	^---^

==============================================================================
vim:tw=78:ts=8:ft=help
